import { useState } from 'react';
import Head from 'next/head'
import Image from 'next/image'
import styles from '@/styles/Home.module.scss'
import Navbar from '@/components/Navbar'
import Button, { ButtonType } from '@/components/Button'
import Footer from '@/components/Footer'
import Link from 'next/link'
import TextInput from '@/components/TextInput'
import Checkbox from '@/components/Checkbox'
import APIClient from '@/utils/api';
import { MODAL_TYPES, useGlobalModalContext } from '@/components/GlobalModal';
import LocalAPIClient from '@/utils/localApi';
import { useDispatch, useSelector } from "react-redux";
import { selectAuthState, setAuthState } from "../../store/authSlice";
import { useRouter } from 'next/router';

interface LoginInfoProps {
    email: string;
    password: string;
    remember_me: boolean;
}

export default function Login() {
    const router = useRouter();
    const dispatch = useDispatch();
    const { showModal } = useGlobalModalContext();
    const [loginInfo, setLoginInfo] = useState<LoginInfoProps>({
        email: '',
        password: '',
        remember_me: false,
    });
    const [loading, setLoading] = useState(false);
    const [hasError, setHasError] = useState(false);
    const [errorMessages, setErrorMessages] = useState([]);

    const handleEmailChange = (val: string) => {
        setLoginInfo({
            ...loginInfo,
            email: val,
        });
    }

    const handlePasswordChange = (val: string) => {
        setLoginInfo({
            ...loginInfo,
            password: val,
        });
    }

    const handleRememberMeToggle = (val: boolean) => {
        setLoginInfo({
            ...loginInfo,
            remember_me: val,
        });
    };

    const handleSubmit = async () => {
        if (!loginInfo.email) {
            showModal(MODAL_TYPES.ALERT_MODAL, {
                title: 'Alert',
                description: 'You need to fill your email address',
                confirmBtn: 'OK',
            });
            return;
        }
        if (!loginInfo.password) {
            showModal(MODAL_TYPES.ALERT_MODAL, {
                title: 'Alert',
                description: 'You need to fill password',
                confirmBtn: 'OK',
            });
            return;
        }
        setLoading(true);
        const data = await LocalAPIClient.post('/api/auth/login', {
            email: loginInfo.email,
            password: loginInfo.password,
        });
        setLoading(false);
        if (data && !data.errors) {
            LocalAPIClient.setToken('Bearer ' + data.access_token);
            dispatch(setAuthState(true));
            router.push('/');
        } else {
            if (data && data.errors) {
                setHasError(true);
                setErrorMessages(data.errors);
            }
        }
    };

    return (
        <>
            <Head>
                <title>UPLINK-HEALTH</title>
                <meta name="description" content="Generated by UPLINK-HEALTH" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Navbar />
            <main className={styles.main}>
                <div className={`w-full ${styles.hero1}`}>
                    <div className='flex px-4 py-8 lg:px-24 lg:py-16 container mx-auto flex-col lg:flex-row'>
                        <div className='flex flex-col flex-1 justify-center items-center'>
                            <h1 className='text-xl lg:text-3xl font-weight-bold leading-tight'>WELCOME TO UPLINK-HEALTH!</h1>
                        </div>
                    </div>
                </div>
                <div className={`w-full flex flex-1 ${styles.bgWhite}`}>
                    <div className='flex flex-col px-4 lg:px-24 py-8 container mx-auto items-center'>
                        <p className='text-sm lg:text-lg font-weight-500 my-2 text-gray-600 text-center'>
                            No waiting rooms. No expensive doctors visits.
                        </p>
                        <p className='text-sm lg:text-lg font-weight-500 my-2 text-gray-600 text-center'>
                            Prescription treatments sent to your door, discreetly.
                        </p>
                        <p className='text-sm lg:text-lg font-weight-500 my-2 text-gray-600 text-center'>
                            This is the future of tele-medicine.
                        </p>
                        <p className='text-md lg:text-2xl font-weight-bold my-4 text-gray-600'>
                            Get Started
                        </p>
                        <p className='text-sm lg:text-lg font-weight-500 my-2 text-gray-600'>
                            Not a member?
                            <Link href={'/auth/register'} className="ml-2 text-[#45a46c]">Register</Link>
                        </p>
                        <div className='flex flex-col items-center w-full lg:w-1/3'>
                            <TextInput label="Email" id='email' handleChange={handleEmailChange} hasError={hasError} value={loginInfo.email} />
                            <TextInput label="Password" id='password' type='password' handleChange={handlePasswordChange} hasError={hasError} errorMessage={errorMessages} value={loginInfo.password} />
                            <div className='flex justify-start w-full'>
                                <Checkbox label='Remember me' id={'remember_me'} handleChange={handleRememberMeToggle} />
                            </div>
                            <Button title='Sign In' containerClassName='my-6' type={ButtonType.redOutline} onClick={handleSubmit} disabled={loading} />
                            <p className='text-center w-full mt-2'>or</p>
                            <div className='border border-[#9fdbf3] rounded-md flex items-center justify-center w-full py-3 my-4'>
                                <Image
                                    src="/imgs/google-icon.png"
                                    alt="google"
                                    width={30}
                                    height={30}
                                    className={'h-fit mr-2'}
                                />
                                <p className='font-weight-600'>Continue with Google</p>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
            <Footer />
        </>
    );
};

export async function getServerSideProps(context: any) {
    return {
        props: {}, // will be passed to the page component as props
    }
}